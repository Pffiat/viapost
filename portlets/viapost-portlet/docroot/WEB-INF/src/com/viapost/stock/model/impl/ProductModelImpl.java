/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.viapost.stock.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.viapost.stock.model.Product;
import com.viapost.stock.model.ProductModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Product service. Represents a row in the &quot;Viapost_Product&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.viapost.stock.model.ProductModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductImpl}.
 * </p>
 *
 * @author pif
 * @see ProductImpl
 * @see com.viapost.stock.model.Product
 * @see com.viapost.stock.model.ProductModel
 * @generated
 */
public class ProductModelImpl extends BaseModelImpl<Product>
	implements ProductModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product model instance should use the {@link com.viapost.stock.model.Product} interface instead.
	 */
	public static final String TABLE_NAME = "Viapost_Product";
	public static final Object[][] TABLE_COLUMNS = {
			{ "stockId", Types.BIGINT },
			{ "articleNumber", Types.BIGINT },
			{ "stock", Types.BIGINT },
			{ "seuil_stock", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Viapost_Product (stockId LONG not null primary key,articleNumber LONG,stock LONG,seuil_stock LONG)";
	public static final String TABLE_SQL_DROP = "drop table Viapost_Product";
	public static final String ORDER_BY_JPQL = " ORDER BY product.stockId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Viapost_Product.stockId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.viapost.stock.model.Product"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.viapost.stock.model.Product"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.viapost.stock.model.Product"));

	public ProductModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stockId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStockId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stockId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Product.class;
	}

	@Override
	public String getModelClassName() {
		return Product.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("stockId", getStockId());
		attributes.put("articleNumber", getArticleNumber());
		attributes.put("stock", getStock());
		attributes.put("seuil_stock", getSeuil_stock());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long stockId = (Long)attributes.get("stockId");

		if (stockId != null) {
			setStockId(stockId);
		}

		Long articleNumber = (Long)attributes.get("articleNumber");

		if (articleNumber != null) {
			setArticleNumber(articleNumber);
		}

		Long stock = (Long)attributes.get("stock");

		if (stock != null) {
			setStock(stock);
		}

		Long seuil_stock = (Long)attributes.get("seuil_stock");

		if (seuil_stock != null) {
			setSeuil_stock(seuil_stock);
		}
	}

	@Override
	public long getStockId() {
		return _stockId;
	}

	@Override
	public void setStockId(long stockId) {
		_stockId = stockId;
	}

	@Override
	public long getArticleNumber() {
		return _articleNumber;
	}

	@Override
	public void setArticleNumber(long articleNumber) {
		_articleNumber = articleNumber;
	}

	@Override
	public long getStock() {
		return _stock;
	}

	@Override
	public void setStock(long stock) {
		_stock = stock;
	}

	@Override
	public long getSeuil_stock() {
		return _seuil_stock;
	}

	@Override
	public void setSeuil_stock(long seuil_stock) {
		_seuil_stock = seuil_stock;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Product.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Product toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Product)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductImpl productImpl = new ProductImpl();

		productImpl.setStockId(getStockId());
		productImpl.setArticleNumber(getArticleNumber());
		productImpl.setStock(getStock());
		productImpl.setSeuil_stock(getSeuil_stock());

		productImpl.resetOriginalValues();

		return productImpl;
	}

	@Override
	public int compareTo(Product product) {
		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Product)) {
			return false;
		}

		Product product = (Product)obj;

		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Product> toCacheModel() {
		ProductCacheModel productCacheModel = new ProductCacheModel();

		productCacheModel.stockId = getStockId();

		productCacheModel.articleNumber = getArticleNumber();

		productCacheModel.stock = getStock();

		productCacheModel.seuil_stock = getSeuil_stock();

		return productCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{stockId=");
		sb.append(getStockId());
		sb.append(", articleNumber=");
		sb.append(getArticleNumber());
		sb.append(", stock=");
		sb.append(getStock());
		sb.append(", seuil_stock=");
		sb.append(getSeuil_stock());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.viapost.stock.model.Product");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>stockId</column-name><column-value><![CDATA[");
		sb.append(getStockId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articleNumber</column-name><column-value><![CDATA[");
		sb.append(getArticleNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stock</column-name><column-value><![CDATA[");
		sb.append(getStock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>seuil_stock</column-name><column-value><![CDATA[");
		sb.append(getSeuil_stock());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Product.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Product.class
		};
	private long _stockId;
	private long _articleNumber;
	private long _stock;
	private long _seuil_stock;
	private Product _escapedModel;
}